# -*- coding: utf-8 -*-
"""Predict Customer Churn Using Python and Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EJJsD_ZgqT8jy0hsoLZYunjvU2PCYB4w
"""



"""Hi there welcome to this tutorial on **Python Programming and  Machine Learning** 

In this tutorial we are going to build a progarm that can **Predict Customer Churn** using Python and ML.

let us know first what does Customer Churn Means exactly?

Customer Churn basically means when Customer/subscriber stop doing business with company  or service within a specific amount of time. where on other side retaining customer brings more revenue and business building a meaning full relationship with customer in short customer retention is more valuable than customer aquasation
"""

#step1 Importing Libraries
import pandas as pd
import numpy as np
import sklearn
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

#step2 Loading Data set
from google.colab import files
uploaded = files.upload()

#step3 Load the data into data frame
df = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')
df.head(7)

#show the number of columns and rows
df.shape

#show all of the columns
df.columns.values

#check for missing data or na value
df.isna().sum()

#show some statistics
df.describe()

#Get customer churn count
df['Churn'].value_counts()

#visualize the count of customer churn
sns.countplot(df['Churn'])

#what is the percentage of customer that are leaving?
num_retained = df[df.Churn == 'No'].shape[0]
num_churned = df[df.Churn == 'Yes'].shape[0]

#print the percentage of customer that stayed
print(num_retained/(num_retained+num_churned)*100, '% of customer stayed with the company.')

#print the percentage of customer that stayed
print(num_churned/(num_retained+num_churned)*100, '% of customer left with the company.')

#Visualaize the churn count for both males and female
sns.countplot(x='gender', hue='Churn', data=df)

#visuaize the churn count for the internet service
sns.countplot(x='InternetService', hue='Churn',data = df)

numerical_features = ['tenure','MonthlyCharges']
fig, ax = plt.subplots(1 ,2, figsize=(28,8))
df[df.Churn == 'No'][numerical_features].hist(bins=20, color = 'blue', alpha = 0.5, ax = ax)
df[df.Churn == 'Yes'][numerical_features].hist(bins=20, color = 'orange', alpha = 0.5, ax = ax)

#datapreprocessing Remove unnecessary column
clean_df =df.drop('customerID', axis = 1)

#Look at the number of rows and cols in the data set
clean_df.shape

#Convert all of the non-numeric columns to numeric
for column in clean_df.columns:
  if clean_df[column].dtype ==np.number:
    continue
  clean_df[column] = LabelEncoder().fit_transform(clean_df[column])

#show the new data set data types
clean_df.dtypes

#show the first five row of data set
clean_df.head(5)

#scaled the data 
x = clean_df.drop('Churn', axis = 1)  #feature/Input data set
y = clean_df['Churn'] #output dataset

x=StandardScaler().fit_transform(x)

#Split the data into 80% training and 20% testing
x_tarin, x_test, y_train,y_test = train_test_split(x,y, test_size=0.2, random_state = 42)

#Create the model
model = LogisticRegression()
#Tarin the model
model.fit(x_tarin, y_train)

#Create the predictions on the test data 
predictions = model.predict(x_test)

#print the predictions
print(predictions)

#check the precision, recall, f1-score
print(classification_report(y_test, predictions))

